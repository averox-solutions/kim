<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Kimios - Document Management System Software
  ~ Copyright (C) 2008-2015  DevLib'
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 2 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~ You should have received a copy of the GNU Affero General Public License
  ~ aong with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


    <bean id="propertyConfigurer" class="org.kimios.utils.spring.PropertiesHolderPropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"></property>
        <property name="locations">
            <list>
                <value>file:${kimios.home}/${kimios.app.name}/conf/kimios.properties</value>
            </list>
        </property>
    </bean>

    <bean id="configurationManagerBuilder"
          class="org.kimios.utils.configuration.ConfigurationManagerBuilder">
        <constructor-arg value="server" />
        <property name="holder" ref="propertyConfigurer" />
    </bean>

    <bean id="configurationManager"
          class="org.kimios.utils.configuration.ConfigurationManager"
          factory-bean="configurationManagerBuilder"
          factory-method="createInstance">
    </bean>

    <bean id="sessionFactory"
            class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
            >
        <!-- directly set transaction manager. Spring will handle Hibernate JTA Platform new stuff with
            a ConfigurableJtaPlatform instance
        -->
        <property name="jtaTransactionManager" ref="transactionManager" />
        <property name="dataSource">
            <ref bean="kimiosDataSource"/>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.dialect">${jdbc.dialect}</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">${jdbc.ddl.mode}</prop>
                <prop key="hibernate.default_schema">${jdbc.schema}</prop>
                <prop key="hibernate.current_session_context_class">jta</prop>
                <prop key="hibernate.connection.release_mode">after_statement</prop>
                <prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
            </props>
        </property>
        <property name="annotatedClasses">
            <list>
                <value>org.kimios.kernel.user.model.AuthenticationSourceBean</value>
            </list>
        </property>
        <property name="packagesToScan">
            <list>
                <value>org.kimios.kernel.dms</value>
                <value>org.kimios.kernel.dms.metafeeds.impl</value>
                <value>org.kimios.kernel.repositories</value>
                <value>org.kimios.kernel.security</value>
                <value>org.kimios.kernel.rules</value>
                <value>org.kimios.kernel.log</value>
                <value>org.kimios.kernel.filetransfer</value>
                <value>org.kimios.kernel.index</value>
                <value>org.kimios.kernel.share</value>
                <value>org.kimios.kernel.notification</value>
                <value>org.kimios.kernel.templates</value>
            </list>
        </property>
        <property name="mappingLocations">
            <list>
                <value>classpath:/org/kimios/kernel/hibernate/mapping/authentication.hbm.xml</value>
                <value>classpath:/org/kimios/kernel/hibernate/mapping/${jdbc.databasetype}/dm*.hbm.xml</value>
            </list>
        </property>
    </bean>

    <bean id="contextHolder" class="org.kimios.utils.context.SpringServiceHolder" />

    <bean id="ruleManager" class="org.kimios.kernel.rules.RuleManager">
        <property name="ruleBeanFactory" ref="ruleFactory"></property>
        <property name="contextHolder" ref="contextHolder" />
    </bean>

    <bean id="eventHandlerManager" class="org.kimios.kernel.events.EventHandlerManager">
        <constructor-arg ref="extensionRegistryManager" />

        <property name="configurationManager" ref="configurationManager" />
    </bean>

    <bean id="eventInterceptor" class="org.kimios.kernel.events.interceptors.GenericInterceptor" init-method="init">
        <constructor-arg ref="eventHandlerManager" />
        <constructor-arg ref="ruleManager" />
    </bean>

    <bean id="kernelAspect" class="org.kimios.kernel.events.interceptors.KimiosKernelAspect"
          factory-method="aspectOf" depends-on="eventHandlerManager,ruleManager">
        <property name="ruleManager" ref="ruleManager" />
        <property name="eventHandlerManager" ref="eventHandlerManager" />
    </bean>

    <bean id="kimiosSystemService"
          name="kimiosSystemService"
          class="org.kimios.kernel.system.service.impl.SpringModeSystemService">

    </bean>


    <aop:aspectj-autoproxy />
    <aop:config>
        <aop:pointcut id="securityService"
                expression="execution(* org.kimios.kernel.controller.ISecurityController.*(..))"/>
        <aop:pointcut id="informationService"
                expression="execution(* org.kimios.kernel.controller.IServerInformationController.*(..))"/>
        <aop:pointcut id="workspaceService"
                expression="execution(* org.kimios.kernel.controller.IWorkspaceController.*(..))"/>
        <aop:pointcut id="documentService"
                expression="execution(* org.kimios.kernel.controller.IDocumentController.*(..))"/>
        <aop:pointcut id="folderService"
                expression="execution(* org.kimios.kernel.controller.IFolderController.*(..))"/>
        <aop:pointcut id="documentVersionService"
                expression="execution(* org.kimios.kernel.controller.IDocumentVersionController.*(..))"/>
        <aop:pointcut id="workflowService"
                expression="execution(* org.kimios.kernel.controller.IWorkflowController.*(..))"/>
        <aop:pointcut id="studioService"
                expression="execution(* org.kimios.kernel.controller.IStudioController.*(..))"/>
        <aop:pointcut id="administrationService"
                expression="execution(* org.kimios.kernel.controller.IAdministrationController.*(..))"/>
        <aop:pointcut id="reportingService"
                expression="execution(* org.kimios.kernel.controller.IReportingController.*(..))"/>
        <aop:pointcut id="fileTransferService"
                expression="execution(* org.kimios.kernel.controller.IFileTransferController.*(..))"/>
        <aop:pointcut id="ruleService"
                expression="execution(* org.kimios.kernel.controller.IRuleManagementController.*(..))"/>
        <aop:pointcut id="sessionService"
                expression="execution(* org.kimios.kernel.security.ISessionManager.getSession(*))"/>
        <aop:pointcut id="aclUpdateService"
                expression="execution(* org.kimios.kernel.jobs.security.IACLUpdater.*(..))"/>
        <aop:pointcut id="pathService" expression="execution(* org.kimios.kernel.controller.IPathController.*(..))"/>
        <aop:pointcut id="extService"
                expression="execution(* org.kimios.kernel.controller.IExtensionController.*(..))"/>
        <aop:pointcut id="repoService"
                expression="execution(* org.kimios.kernel.repositories.impl.RepositoryService.*(..))"/>
        <aop:pointcut id="sessManagerPct"
                expression="execution(* org.kimios.kernel.security.SessionManager.*SessionContext(..))"/>
        <aop:pointcut id="dataInitPct"
                      expression="execution(* org.kimios.kernel.deployment.IDataInitializerCtrl.*(..))"/>


        <!-- map pointcut to Tx -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="securityService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="informationService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="folderService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="documentService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="documentVersionService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="workspaceService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="workflowService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="administrationService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="studioService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="reportingService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="fileTransferService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="sessionService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="ruleService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pathService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="extService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="aclUpdateService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="repoService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="sessManagerPct"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="dataInitPct"/>
    </aop:config>
    <bean id="appContextProvider" class="org.kimios.utils.spring.ApplicationContextProvider"/>
</beans>
              


