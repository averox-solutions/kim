<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Kimios - Document Management System Software
  ~ Copyright (C) 2008-2014  DevLib'
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 2 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~ You should have received a copy of the GNU Affero General Public License
  ~ aong with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0
        http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd" default-activation="eager">


    <cm:property-placeholder id="kimiosServerCfg" persistent-id="org.kimios.server.app" update-strategy="none"
                             activation="eager">
    </cm:property-placeholder>

    <bean id="propertyConfigurer" class="org.kimios.utils.configuration.OsgiConfigurationHolder"
          depends-on="kimiosServerCfg">
        <argument ref="blueprintBundleContext"/>
        <argument value="org.kimios.server.app"/>
    </bean>

    <bean id="configurationManagerHolder" class="org.kimios.utils.configuration.ConfigurationManagerBuilder">
        <argument value="server" />
        <property name="holder" ref="propertyConfigurer"/>
    </bean>

    <bean id="configurationManager" class="org.kimios.utils.configuration.ConfigurationManager"
          factory-ref="configurationManagerHolder"
          factory-method="createInstance">
    </bean>

    <reference id="webSocketManager" interface="org.kimios.websocket.client.controller.IWebSocketManager" />

    <bean id="eventHandlerManager" class="org.kimios.kernel.events.EventHandlerManager">
        <argument ref="extensionRegistryManager" />

        <property name="configurationManager" ref="configurationManager"/>
    </bean>



    <bean id="contextHolder" class="org.kimios.utils.context.OsgiServiceHolder" />

    <bean id="ruleManager" class="org.kimios.kernel.rules.RuleManager">
         <property name="ruleBeanFactory" ref="ruleFactory"></property>
         <property name="contextHolder" ref="contextHolder" />
     </bean>

     <bean id="eventInterceptor" class="org.kimios.kernel.events.interceptors.GenericInterceptor" init-method="init">
         <argument ref="eventHandlerManager" />
         <argument ref="ruleManager" />
     </bean>

     <bean id="kernelAspect" class="org.kimios.kernel.events.interceptors.KimiosKernelAspect" factory-method="aspectOf">
         <property name="ruleManager" ref="ruleManager" />
         <property name="eventHandlerManager" ref="eventHandlerManager" />
     </bean>

    <reference id="systemService" interface="org.apache.karaf.system.SystemService" />
    <bean id="kimiosSystemService"
          class="org.kimios.kernel.system.service.impl.KarafSystemService">
        <argument ref="systemService" />
    </bean>
    <service id="kimiosSystemServiceOsgi" ref="kimiosSystemService"
             interface="org.kimios.kernel.system.service.KimiosSystemService" />

    <service id="eventHandlerRegistry" ref="eventHandlerManager"
             interface="org.kimios.kernel.events.IEventHandlerManager"/>
     <service id="adminCtrlOsgi" ref="administrationController"
              interface="org.kimios.kernel.controller.IAdministrationController"/>
     <service id="studioCtrlOsgi" ref="studioController"
              interface="org.kimios.kernel.controller.IStudioController"/>
     <service id="docCtrlOsgi" ref="documentController"
              interface="org.kimios.kernel.controller.IDocumentController"/>
     <service id="versionCtrlOsgi" ref="documentVersionController"
              interface="org.kimios.kernel.controller.IDocumentVersionController"/>
     <service id="wksCtrlOsgi" ref="workspaceController"
              interface="org.kimios.kernel.controller.IWorkspaceController"/>
    <service id="entCtrlOsgi" ref="dmEntityController"
             interface="org.kimios.kernel.controller.IDmEntityController"/>
    <service id="fldCtrlOsgi" ref="folderController"
              interface="org.kimios.kernel.controller.IFolderController"/>
     <service id="fileTransferCtrlOsgi" ref="fileTransferController"
              interface="org.kimios.kernel.controller.IFileTransferController"/>
     <service id="reportCtrlOsgi" ref="reportingController"
              interface="org.kimios.kernel.controller.IReportingController"/>
     <service id="rulesCtrlOsgi" ref="rulesController"
              interface="org.kimios.kernel.controller.IRuleManagementController"/>
     <service id="secCtrlOsgi" ref="securityController"
              interface="org.kimios.kernel.controller.ISecurityController"/>
     <service id="infoCtrlOsgi" ref="informationController"
              interface="org.kimios.kernel.controller.IServerInformationController"/>
     <service id="wkfCtrlOsgi" ref="workflowController"
              interface="org.kimios.kernel.controller.IWorkflowController"/>
     <service id="extensionCtrlOsgi" ref="extensionController"
              interface="org.kimios.kernel.controller.IExtensionController"/>

     <service id="sessMngOsgi" ref="sessionManager"
              interface="org.kimios.kernel.security.ISessionManager"/>

     <service id="pathCtrlOsgi" ref="pathController"
              interface="org.kimios.kernel.controller.IPathController"/>


     <service id="aclUpdaterOsgi" ref="aclUpdater"
              interface="org.kimios.kernel.jobs.security.IACLUpdater"/>

     <service id="securityAgentOsgi" ref="securityAgent"
              interface="org.kimios.kernel.security.ISecurityAgent"/>


     <service id="dmsFactoryInstantiatorOsgi" ref="dmsfi"
              interface="org.kimios.kernel.dms.IDmsFactoryInstantiator"></service>
     <service id="securityFactoryInstantiatorOsgi" ref="securityfi"
              interface="org.kimios.kernel.security.ISecurityFactoryInstantiator"></service>
     <service id="authFactoryInstantiatorOsgi" ref="userfi"
              interface="org.kimios.kernel.user.IAuthenticationFactoryInstantiator"></service>
     <service id="logFactoryInstantiatorOsgi" ref="logfi"
              interface="org.kimios.kernel.log.ILogFactoryInstantiator"></service>
     <service id="reportFactoryInstantiatorOsgi" ref="reportfi"
              interface="org.kimios.kernel.reporting.factory.IReportFactoryInstantiator"></service>
     <service id="transferFactoryInstantiatorOsgi" ref="transferfi"
              interface="org.kimios.kernel.filetransfer.IFileTransferFactoryInstantiator"></service>



    <service id="jobServiceOsgi" ref="jobController"
             interface="org.kimios.kernel.jobs.IJobController"></service>

    <reference id="extensionRegistryManager"
             interface="org.kimios.utils.extension.IExtensionRegistryManager" />



    <!-- converter registry -->
    <bean id="converterRegistry" class="org.kimios.kernel.registries.ConverterRegistry">
        <argument ref="extensionRegistryManager" />
    </bean>

    <!-- report registry -->
    <bean id="reportRegistry" class="org.kimios.kernel.registries.ReportRegistry">
        <argument ref="extensionRegistryManager" />
    </bean>

    <!-- auth source registry -->
    <bean id="authenticationSourceRegistry"
          class="org.kimios.kernel.registries.AuthenticationSourceRegistry">
        <argument ref="extensionRegistryManager" />
    </bean>

    <!-- rules registry -->
    <bean id="ruleRegistry" class="org.kimios.kernel.registries.RuleRegistry">
        <argument ref="extensionRegistryManager" />
    </bean>

</blueprint>
              


